//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Arkivverket.Arkade.GUI.Languages {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class MetadataToolTips {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MetadataToolTips() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Arkivverket.Arkade.GUI.Resources.MetadataToolTips", typeof(MetadataToolTips).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to todo: Reference number for the archive package.
        /// </summary>
        public static string AgreementNumber {
            get {
                return ResourceManager.GetString("AgreementNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to todo: Description of the archive package.
        /// </summary>
        public static string ArchiveDescription {
            get {
                return ResourceManager.GetString("ArchiveDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Description of the archive system type.
        /// </summary>
        public static string DeliveryType {
            get {
                return ResourceManager.GetString("DeliveryType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original archival creator, the origin or source of the archive.
        /// </summary>
        public static string GuiSubsection_ArchiveCreator {
            get {
                return ResourceManager.GetString("GuiSubsection_ArchiveCreator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Give a short explanation of the archive&apos;s content.
        /// </summary>
        public static string GuiSubsection_ArchiveMain {
            get {
                return ResourceManager.GetString("GuiSubsection_ArchiveMain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first and last registration of records.
        /// </summary>
        public static string GuiSubsection_ArchiveStartAndEndDate {
            get {
                return ResourceManager.GetString("GuiSubsection_ArchiveStartAndEndDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The software that extracted data from the system.
        /// </summary>
        public static string GuiSubsection_ArchiveSystem {
            get {
                return ResourceManager.GetString("GuiSubsection_ArchiveSystem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The organization that creates the package containing the archive.
        /// </summary>
        public static string GuiSubsection_Creator {
            get {
                return ResourceManager.GetString("GuiSubsection_Creator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Receives upload link for transfer to the National Archives.
        /// </summary>
        public static string GuiSubsection_Creator_Email {
            get {
                return ResourceManager.GetString("GuiSubsection_Creator_Email", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The date when data was extracted from the system.
        /// </summary>
        public static string GuiSubsection_ExtractionDate {
            get {
                return ResourceManager.GetString("GuiSubsection_ExtractionDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity with ownership and disposal rights over the archive.
        /// </summary>
        public static string GuiSubsection_Owner {
            get {
                return ResourceManager.GetString("GuiSubsection_Owner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity responsible for the technical extraction of data. Often the service provider..
        /// </summary>
        public static string GuiSubsection_Producer {
            get {
                return ResourceManager.GetString("GuiSubsection_Producer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The archival repository responsible for receiving the information package.
        /// </summary>
        public static string GuiSubsection_Recipient {
            get {
                return ResourceManager.GetString("GuiSubsection_Recipient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The software used for creating the archive, such as records management systems or information systems..
        /// </summary>
        public static string GuiSubsection_System {
            get {
                return ResourceManager.GetString("GuiSubsection_System", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Responsible organisation for the transfer of archives to the depository..
        /// </summary>
        public static string GuiSubsection_Transferer {
            get {
                return ResourceManager.GetString("GuiSubsection_Transferer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the position of this package in a series or session.
        ///E.g.:
        ///NEW - 1.0
        ///SUPPLEMENT - (1..N).(1..N)
        ///REPLACEMENT - (1..N).(0..N)b
        ///VERSION - (2..N).0.
        /// </summary>
        public static string PackageNumber {
            get {
                return ResourceManager.GetString("PackageNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If applicable, the name of the project this package belongs to..
        /// </summary>
        public static string ProjectName {
            get {
                return ResourceManager.GetString("ProjectName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Archive package status type.
        /// </summary>
        public static string RecordStatus {
            get {
                return ResourceManager.GetString("RecordStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accession – A new archive package for deposition or submittal.
        ///This is usually the main basis which constitutes the majority of the archival material for deposition..
        /// </summary>
        public static string RecordStatusNEW {
            get {
                return ResourceManager.GetString("RecordStatusNEW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Other – An archive package not fitting any of the above descriptions..
        /// </summary>
        public static string RecordStatusOTHER {
            get {
                return ResourceManager.GetString("RecordStatusOTHER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Correction – A new archive package which entirely or partially corrects a previously submitted package..
        /// </summary>
        public static string RecordStatusREPLACEMENT {
            get {
                return ResourceManager.GetString("RecordStatusREPLACEMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Addition – An archive package containing data whose purpose is to enrich a base package.
        ///I.e.: tabel descriptions, production formats, system documentation, document templates, logs e.t.c..
        /// </summary>
        public static string RecordStatusSUPPLEMENT {
            get {
                return ResourceManager.GetString("RecordStatusSUPPLEMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An archival package for evaluation or trial. Commonly used when a package is submitted as an evaluation of another package, or for testing purposes; i.e.: infrastructure or procedures.
        ///These kind of packages are usually discarded afterwards..
        /// </summary>
        public static string RecordStatusTEST {
            get {
                return ResourceManager.GetString("RecordStatusTEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Period – An archive package containing a possible new period of the archival material. 
        ///Not to be confused with an &apos;Addition&apos; (SUPPLEMENT)
        ///Example: A periodization is submitted from a new system, however, purpose and roles are unchanged..
        /// </summary>
        public static string RecordStatusVERSION {
            get {
                return ResourceManager.GetString("RecordStatusVERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The purpose of this reference code must be agreed upon by submitter and receiver.
        ///Some examples:
        /// - Case or project number at agency/municipality/archive creator/archive owner
        /// - UUID of previously submitted package with record status NEW/VERSION (if this package has record status SUPPLEMENT/REPLACEMENT).
        /// </summary>
        public static string ReferenceCode {
            get {
                return ResourceManager.GetString("ReferenceCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of information packet according to the OAIS (Open Archival Information System) standard. For transfers to the repository, &quot;SIP&quot; (Submission Information Package) is used..
        /// </summary>
        public static string SelectPackageType {
            get {
                return ResourceManager.GetString("SelectPackageType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AIP - Archival Information Package.
        /// </summary>
        public static string SelectPackageType_AIP {
            get {
                return ResourceManager.GetString("SelectPackageType_AIP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SIP - Submission Information Package.
        /// </summary>
        public static string SelectPackageType_SIP {
            get {
                return ResourceManager.GetString("SelectPackageType_SIP", resourceCulture);
            }
        }
    }
}
