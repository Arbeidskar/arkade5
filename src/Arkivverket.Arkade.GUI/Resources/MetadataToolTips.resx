<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RecordStatusNEW" xml:space="preserve">
    <value>Accession – A new archive package for deposition or submittal.
This is usually the main basis which constitutes the majority of the archival material for deposition.</value>
  </data>
  <data name="RecordStatusSUPPLEMENT" xml:space="preserve">
    <value>Addition – An archive package containing data whose purpose is to enrich a base package.
I.e.: tabel descriptions, production formats, system documentation, document templates, logs e.t.c.</value>
  </data>
  <data name="RecordStatusREPLACEMENT" xml:space="preserve">
    <value>Correction – A new archive package which entirely or partially corrects a previously submitted package.</value>
  </data>
  <data name="RecordStatusTEST" xml:space="preserve">
    <value>An archival package for evaluation or trial. Commonly used when a package is submitted as an evaluation of another package, or for testing purposes; i.e.: infrastructure or procedures.
These kind of packages are usually discarded afterwards.</value>
  </data>
  <data name="RecordStatusVERSION" xml:space="preserve">
    <value>Period – An archive package containing a possible new period of the archival material. 
Not to be confused with an 'Addition' (SUPPLEMENT)
Example: A periodization is submitted from a new system, however, purpose and roles are unchanged.</value>
  </data>
  <data name="RecordStatusOTHER" xml:space="preserve">
    <value>Other – An archive package not fitting any of the above descriptions.</value>
  </data>
  <data name="ArchiveDescription" xml:space="preserve">
    <value>todo: Description of the archive package</value>
  </data>
  <data name="AgreementNumber" xml:space="preserve">
    <value>todo: Reference number for the archive package</value>
  </data>
  <data name="DeliveryType" xml:space="preserve">
    <value>Description of the archive system type</value>
  </data>
  <data name="RecordStatus" xml:space="preserve">
    <value>Archive package status type</value>
  </data>
  <data name="PackageNumber" xml:space="preserve">
    <value>Indicates the position of this package in a series or session.
E.g.:
NEW - 1.0
SUPPLEMENT - (1..N).(1..N)
REPLACEMENT - (1..N).(0..N)b
VERSION - (2..N).0</value>
  </data>
  <data name="ReferenceCode" xml:space="preserve">
    <value>The purpose of this reference code must be agreed upon by submitter and receiver.
Some examples:
 - Case or project number at agency/municipality/archive creator/archive owner
 - UUID of previously submitted package with record status NEW/VERSION (if this package has record status SUPPLEMENT/REPLACEMENT)</value>
  </data>
  <data name="ProjectName" xml:space="preserve">
    <value>If applicable, the name of the project this package belongs to.</value>
  </data>
  <data name="GuiSubsection_ArchiveMain" xml:space="preserve">
    <value>Give a short explanation of the archive's content</value>
  </data>
  <data name="GuiSubsection_ArchiveCreator" xml:space="preserve">
    <value>Original archival creator, the origin or source of the archive</value>
  </data>
  <data name="GuiSubsection_Transferer" xml:space="preserve">
    <value>Responsible organisation for the transfer of archives to the depository.</value>
  </data>
  <data name="GuiSubsection_Producer" xml:space="preserve">
    <value>The entity responsible for the technical extraction of data. Often the service provider.</value>
  </data>
  <data name="GuiSubsection_System" xml:space="preserve">
    <value>The software used for creating the archive, such as records management systems or information systems.</value>
  </data>
  <data name="GuiSubsection_Recipient" xml:space="preserve">
    <value>The archival repository responsible for receiving the information package</value>
  </data>
  <data name="GuiSubsection_Owner" xml:space="preserve">
    <value>The entity with ownership and disposal rights over the archive</value>
  </data>
  <data name="GuiSubsection_ArchiveStartAndEndDate" xml:space="preserve">
    <value>The first and last registration of records</value>
  </data>
  <data name="GuiSubsection_ExtractionDate" xml:space="preserve">
    <value>The date when data was extracted from the system</value>
  </data>
  <data name="GuiSubsection_Creator" xml:space="preserve">
    <value>The organization that creates the package containing the archive</value>
  </data>
  <data name="GuiSubsection_Creator_Email" xml:space="preserve">
    <value>Receives upload link for transfer to the National Archives</value>
  </data>
  <data name="GuiSubsection_ArchiveSystem" xml:space="preserve">
    <value>The software that extracted data from the system</value>
  </data>
  <data name="SelectPackageType" xml:space="preserve">
    <value>The type of information packet according to the OAIS (Open Archival Information System) standard. For transfers to the repository, "SIP" (Submission Information Package) is used.</value>
  </data>
  <data name="SelectPackageType_SIP" xml:space="preserve">
    <value>SIP - Submission Information Package</value>
  </data>
  <data name="SelectPackageType_AIP" xml:space="preserve">
    <value>AIP - Archival Information Package</value>
  </data>
</root>