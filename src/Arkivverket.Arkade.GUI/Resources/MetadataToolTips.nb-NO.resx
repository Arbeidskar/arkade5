<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RecordStatusNEW" xml:space="preserve">
    <value>Aksesjon – En ny deponeringspakke som skal deponeres eller avleveres til angitt depot.
Dette er ofte hovedgrunnlaget som utgjør majoriteten av arkivmaterialet som deponeres.</value>
  </data>
  <data name="RecordStatusSUPPLEMENT" xml:space="preserve">
    <value>Tilvekst – En deponeringspakke med innhold som videre beriker grunnlaget.
Det kan være tabelbeskrivelser, produksjonsformater, systemdokumentasjon, dokumentmaler eller logger o.l.</value>
  </data>
  <data name="RecordStatusREPLACEMENT" xml:space="preserve">
    <value>Korreksjon – En ny deponeringspakke som korrigerer en tidligere pakke, enten fullstendig eller delvis.
Det kan være at en tidligere pakke er avvist eller inneholder avvik av en særskilt høy karakter som fører til at kvaliteten forringes.</value>
  </data>
  <data name="RecordStatusTEST" xml:space="preserve">
    <value>Prøvepakke eller Evalueringspakke, disse pakkene sendes ofte til depot som en evaluering av arbeidet som er gjort eller for å teste infrastruktur eller rutiner.
Disse pakkene kan oftest forkastes i ettertid.</value>
  </data>
  <data name="RecordStatusVERSION" xml:space="preserve">
    <value>Periode – En deponeringspakke som inneholder en potensielt ny periode av av materialet. 
Dette er ikke det samme som en tilvekst da dette gjerne fører med seg nye SUPPLEMENT-pakker og gjelder for en ny virkeperiode.
Et eksempel her er når det kommer en periodisering fra et nytt system, men hvor formål og roller har vært de samme.</value>
  </data>
  <data name="RecordStatusOTHER" xml:space="preserve">
    <value>Annet – En deponeringspakke eller annen type pakke som ikke passer inn i beskrivelsene over.</value>
  </data>
  <data name="ArchiveDescription" xml:space="preserve">
    <value>todo: Beskrivelse av arkivet</value>
  </data>
  <data name="AgreementNumber" xml:space="preserve">
    <value>todo: Referansenummer for innlevering</value>
  </data>
  <data name="DeliveryType" xml:space="preserve">
    <value>Beskrivelse av forsendelsen, arkivets systemtype</value>
  </data>
  <data name="RecordStatus" xml:space="preserve">
    <value>Pakkens oppføringstype</value>
  </data>
  <data name="PackageNumber" xml:space="preserve">
    <value>Indikerer hvilken posisjon i en serie eller sesjon denne pakken tilhører.
Eksempeloppsett relatert til oppføringstyper:
NEW - 1.0
SUPPLEMENT - (1..N).(1..N)
REPLACEMENT - (1..N).(0..N)b
VERSION - (2..N).0</value>
  </data>
  <data name="ReferenceCode" xml:space="preserve">
    <value>Dersom denne brukes, skal det gjøres etter avtale mellom avsender og mottaker.
Det må også avtales hva referansekoden skal referere til.
Eksempler:
 - Saks- eller prosjektnummer hos etat/kommune/arkivskaper/arkiveier
 - UUID til hovedpakke i NEW/VERSION (dersom denne pakken har oppføringstypen SUPPLEMENT)</value>
  </data>
  <data name="ProjectName" xml:space="preserve">
    <value>Eventuelt prosjektnavn hos etat, kommune, arkivskaper eller arkiveier.</value>
  </data>
  <data name="GuiSubsection_ArchiveMain" xml:space="preserve">
    <value>Gi en kort beskrivelse av innholdet i arkivet</value>
  </data>
  <data name="GuiSubsection_ArchiveCreator" xml:space="preserve">
    <value>Opprinnelig arkivskaper, opphavet til arkivet</value>
  </data>
  <data name="GuiSubsection_Transferer" xml:space="preserve">
    <value>Juridisk ansvarlig virksomhet for overføring av arkiv til depot. Ofte samme som arkivskaper.</value>
  </data>
  <data name="GuiSubsection_Producer" xml:space="preserve">
    <value>Teknisk uttrekksprodusent. Ofte systemleverandør.</value>
  </data>
  <data name="GuiSubsection_System" xml:space="preserve">
    <value>Navnet på systemet arkivet ble skapt i. Bruk det etablerte navnet hos dere. Er det ikke et naturlig systemnavn kan korte beskrivelser som «Mappestruktur på filserver» og «Mediekonvertert fotosamling» benyttes.</value>
  </data>
  <data name="GuiSubsection_Recipient" xml:space="preserve">
    <value>Mottaker av arkivpakke, f.eks. «Arkivverket»</value>
    <comment>Institusjonsnavn</comment>
  </data>
  <data name="GuiSubsection_Owner" xml:space="preserve">
    <value>Virksomhet med eierskap og råderett til arkivet</value>
  </data>
  <data name="GuiSubsection_NoarkParameters" xml:space="preserve">
    <value>Første og siste registrering</value>
  </data>
  <data name="GuiSubsection_ExtractionDate" xml:space="preserve">
    <value>Dato arkivuttrekket ble generert</value>
  </data>
  <data name="GuiSubsection_Creator" xml:space="preserve">
    <value>Virksomhet som skaper arkivpakken og tilhørende METS-dokument</value>
  </data>
  <data name="GuiSubsection_ArchiveSystem" xml:space="preserve">
    <value>Systemet som produserte arkivuttrekket</value>
  </data>
  <data name="GuiSubsection_Creator_Email" xml:space="preserve">
    <value>Mottar opplastingslenke ved overføring til Arkivverket</value>
  </data>
  <data name="SelectPackageType" xml:space="preserve">
    <value>Informasjonspakketype etter OAIS-standarden.</value>
  </data>
  <data name="SelectPackageType_SIP" xml:space="preserve">
    <value>SIP - Overføringspakke - for overføring til depot</value>
  </data>
  <data name="SelectPackageType_AIP" xml:space="preserve">
    <value>AIP - Bevaringspakke - for vedlikehold i depot</value>
  </data>
</root>